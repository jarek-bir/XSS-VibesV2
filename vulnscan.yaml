name: vulnscan
desc: Run vulnerability scan with HTTP data

report:
  final:
    - "{{Output}}/vuln/active/{{Workspace}}-report.html"
    - "{{Output}}/vuln/sensitive/{{Workspace}}-sensitive.html"
    - "{{Output}}/vuln/nuclei/{{Workspace}}-nuclei.html"
    - "{{Output}}/vuln/active/jaeles-summary.txt"
    - "{{Output}}/vuln/active/"
    - "{{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt"

params:
  - httpFile: "{{Output}}/probing/http-{{Workspace}}.txt"
  - sign: "~/.jaeles/base-signatures/common/.*"
  - sign2: "~/.jaeles/base-signatures/sensitive/.*"
  - final: "sensitive"
  - enableJaeles: "false"
  - enableNuclei: "true"
  - lines: "500"
  - nucleiSeverity: "critical,high,medium,low,info"
  - nucleiTimeout: "8h"
  - jaelesTimeout: "3h"
  - nucleiThreads: '{{ threads * 10 }}'
  - jaelesThreads: '{{ threads * 5 }}'
  - defaultUA: "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4581.0 Safari/537.36"
  # in case we want to add -p 'dest=xx.burpcollab.net' or something
  - extraJaeles: " "
  - extraNuclei: " "

pre_run:
  - CreateFolder("{{Output}}/vuln")
  - CreateFolder("{{Output}}/vuln/raw")

steps:
  # prepare input for Jaeles
  - required:
      - "{{httpFile}}"
    scripts:
      - SplitFile("{{httpFile}}", "{{Workspace}}-index", {{lines}}, "{{Output}}/vuln/raw")

  # run jaeles with all products signatures each [[.line]] at a time
  - required:
      - "{{Binaries}}/jaeles"
    conditions:
      - '"{{enableJaeles}}" == "true"'
    source: "{{Output}}/vuln/raw/{{Workspace}}-index"
    parallel: 1
    commands:
      - "timeout -k 1m {{jaelesTimeout}} {{Binaries}}/jaeles scan -c {{jaelesThreads}} -s '{{sign}}' -U [[.line]] -o {{Output}}/vuln/active/ {{extraJaeles}}"
      - "timeout -k 1m {{jaelesTimeout}} {{Binaries}}/jaeles scan --fi -c {{jaelesThreads}} -s '{{sign2}}' -U [[.line]] -o {{Output}}/vuln/sensitive/ {{extraJaeles}}"
    scripts:
      - ExecCmd("sort -u -t '-' -k1,3 -o {{Output}}/vuln/active/jaeles-summary.txt {{Output}}/vuln/active/jaeles-summary.txt")
      - ExecCmd("sort -u -t '-' -k1,3 -o {{Output}}/vuln/sensitive/jaeles-summary.txt {{Output}}/vuln/sensitive/jaeles-summary.txt")
      - ExecCmd('cat "{{Output}}/vuln/active/jaeles-summary.txt" >> {{Storages}}/assets/{{Workspace}}/activescan-{{Workspace}}.txt')
      - ExecCmd('{{Binaries}}/jaeles report -o {{Output}}/vuln/active/ -R {{Output}}/vuln/active/{{Workspace}}-report.html')
      - ExecCmd('cat "{{Output}}/vuln/sensitive/jaeles-summary.txt" >> {{Storages}}/assets/{{Workspace}}/sensitive-{{Workspace}}.txt')
      - ExecCmd('{{Binaries}}/jaeles report -o {{Output}}/vuln/sensitive/ -R {{Output}}/vuln/sensitive/{{Workspace}}-sensitive.html')

  # prepare input for Jaeles
  - required:
      - "{{Output}}/vuln/active/jaeles-summary.txt"
    commands:
      - "{{Binaries}}/jaeles report -o {{Output}}/vuln/active/ -R {{Output}}/vuln/active/{{Workspace}}-report.html"
      - "{{Binaries}}/jaeles report -o {{Output}}/vuln/sensitive/ -R {{Output}}/vuln/sensitive/{{Workspace}}-sensitive.html"

  # noti report to telegram
  - required:
      - "{{Output}}/vuln/active/jaeles-summary.txt"
    commands:
      - cp {{Output}}/vuln/active/jaeles-summary.txt {{Output}}/vuln/active/activescan-{{Workspace}}-{{TS}}.txt
    scripts:
      - TeleMessByFile("#report", "{{Output}}/vuln/active/activescan-{{Workspace}}-{{TS}}.txt")
      - Cat("{{Output}}/vuln/active/activescan-{{Workspace}}-{{TS}}.txt")
  - required:
      - "{{Output}}/vuln/sensitive/jaeles-summary.txt"
    commands:
      - cp {{Output}}/vuln/sensitive/jaeles-summary.txt {{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt
    scripts:
      - TeleMessByFile("#sensitive", "{{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt")
      - ExecCmd("{{Binaries}}/notify -pc {{Data}}/external-configs/notify-provider.yaml -silent -bulk -data {{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt > /dev/null 2>&1 ")
      - Cat("{{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt")

  # nuclei scan
  - conditions:
      - '"{{enableNuclei}}" == "true"'
    required:
      - "{{httpFile}}"
      - "{{Binaries}}/nuclei"
    scripts:
      - CreateFolder('{{Output}}/vuln/nuclei')
      - "ExecCmd(\"timeout -k 1m {{nucleiTimeout}} {{Binaries}}/nuclei -H '{{defaultUA}}' -project -project-path {{Output}}/vuln/nuclei/db {{extraNuclei}} -silent -c {{nucleiThreads}} -jsonl -severity '{{nucleiSeverity}}' -t ~/nuclei-templates/ -l {{httpFile}} -irr -o {{Output}}/vuln/nuclei/{{Workspace}}-nuclei-json.txt\")"
      - GenNucleiReport('{{Output}}/vuln/nuclei/{{Workspace}}-nuclei-json.txt', '{{Output}}/vuln/nuclei/{{Workspace}}-nuclei.html')
      # noti to telegram if anything found
      - ExecCmd("cat {{Output}}/vuln/nuclei/{{Workspace}}-nuclei-json.txt | jq -r '[.info.severity,.\"template-id\",.\"matched-at\",.\"matched-name\"] | join(\" - \")' > {{Output}}/vuln/nuclei/{{Workspace}}-nuclei-scan.txt")
      - SortU("{{Output}}/vuln/nuclei/{{Workspace}}-nuclei-scan.txt")
      - TeleMessByFile("#sensitive", "{{Output}}/vuln/nuclei/{{Workspace}}-nuclei-scan.txt")
      - Cat("{{Output}}/vuln/nuclei/{{Workspace}}-nuclei-scan.txt")
      - ExecCmd("{{Binaries}}/notify -pc {{Data}}/external-configs/notify-provider.yaml -silent -bulk -data {{Output}}/vuln/nuclei/{{Workspace}}-nuclei-scan.txt > /dev/null 2>&1 ")

  # clean up the nuclei db
  - scripts:
      - ExecCmd("rm -rf {{Output}}/vuln/nuclei/db")

  - scripts:
      - GenMarkdownReport("{{Data}}/markdown/urls-template.md", "{{Output}}/summary.html")
