#!/usr/bin/env python3
"""
XSS Vibes V2 - Ultimate Hunter
Comprehensive reconnaissance combining all discoveries
Based on real-world Trip.com/Ctrip.com findings
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path
from datetime import datetime
import argparse

# Add parent directory for imports
sys.path.append(str(Path(__file__).parent.parent))

from xss_vibes.api_hunter import APIEndpointHunter
from xss_vibes.dev_hunter import DevInterfaceHunter


class UltimateHunter:
    def __init__(self):
        self.api_hunter = APIEndpointHunter()
        self.dev_hunter = DevInterfaceHunter()

        # Known working patterns from discoveries
        self.soa2_service_ids = [11470, 18088, 14000]  # Confirmed working
        self.soa2_endpoints = [
            # Confirmed working
            "getToken.json",
            "getAppConfig.json",
            # High-value targets
            "getConfig.json",
            "getSettings.json",
            "getUserInfo.json",
            "admin/getConfig.json",
            "internal/getConfig.json",
            "debug/getTrace.json",
        ]

        # Extended service ID ranges for deep scan
        self.extended_service_ids = [
            *range(11460, 11480),  # Around 11470
            *range(18080, 18100),  # Around 18088
            *range(13990, 14010),  # Around 14000
            *range(10000, 20000, 1000),  # Major increments
        ]

    async def ultimate_hunt(self, domain: str, deep_scan: bool = False) -> dict:
        """Ultimate comprehensive hunt"""
        results = {
            "domain": domain,
            "timestamp": datetime.now().isoformat(),
            "soa2_endpoints": [],
            "dev_interfaces": [],
            "api_endpoints": [],
            "summary": {},
        }

        print(f"🎯 Ultimate Hunt: {domain}")
        print("=" * 60)

        # 1. SOA2 Endpoint Hunt (highest priority)
        print("\n🔥 Phase 1: SOA2 Endpoint Discovery")
        print("-" * 40)

        await self.api_hunter.init_session()

        try:
            # Test known working patterns first
            service_ids = (
                self.extended_service_ids if deep_scan else self.soa2_service_ids
            )

            for service_id in service_ids:
                print(f"   Testing service ID: {service_id}")

                for endpoint in self.soa2_endpoints:
                    targets = [
                        f"https://m.{domain}/restapi/soa2/{service_id}/{endpoint}",
                        f"https://www.{domain}/restapi/soa2/{service_id}/{endpoint}",
                    ]

                    for target in targets:
                        result = await self.api_hunter.test_api_endpoint(target)
                        if result and result.get("status_code") in [200, 403]:
                            results["soa2_endpoints"].append(result)
                            status = result.get("status_code")
                            confidence = result.get("confidence")
                            print(f"      ✅ {target} - {status} - {confidence}%")

                            # Show extracted data for 200s
                            if status == 200 and result.get("data_extracted"):
                                print(f"         Data: {result.get('data_extracted')}")

                        await asyncio.sleep(0.1)

            # 2. Development Interface Hunt
            print(f"\n🔍 Phase 2: Development Interface Discovery")
            print("-" * 40)

            dev_results = await self.dev_hunter.hunt_dev_interfaces([domain])
            results["dev_interfaces"] = dev_results

            if dev_results:
                print(f"   Found {len(dev_results)} development interfaces")
                for result in dev_results[:3]:  # Show top 3
                    print(f"      ✅ {result.get('url')} - {result.get('confidence')}%")

            # 3. General API Hunt (if deep scan)
            if deep_scan:
                print(f"\n🌐 Phase 3: General API Discovery")
                print("-" * 40)

                general_results = await self.api_hunter.hunt_api_endpoints(
                    [domain], max_concurrent=5
                )
                results["api_endpoints"] = general_results

                if general_results:
                    print(f"   Found {len(general_results)} general API endpoints")
                    for result in general_results[:5]:  # Show top 5
                        print(
                            f"      ✅ {result.get('url')} - {result.get('status_code')} - {result.get('confidence')}%"
                        )

        finally:
            await self.api_hunter.close_session()

        # Generate summary
        results["summary"] = {
            "soa2_endpoints_found": len(results["soa2_endpoints"]),
            "soa2_working_200": len(
                [r for r in results["soa2_endpoints"] if r.get("status_code") == 200]
            ),
            "soa2_auth_required_403": len(
                [r for r in results["soa2_endpoints"] if r.get("status_code") == 403]
            ),
            "dev_interfaces_found": len(results["dev_interfaces"]),
            "api_endpoints_found": len(results["api_endpoints"]),
            "total_endpoints": len(results["soa2_endpoints"])
            + len(results["dev_interfaces"])
            + len(results["api_endpoints"]),
        }

        return results

    def print_summary(self, results: dict):
        """Print comprehensive summary"""
        print(f"\n🎉 Ultimate Hunt Summary for {results['domain']}")
        print("=" * 60)

        summary = results["summary"]

        print(f"📊 SOA2 Endpoints: {summary['soa2_endpoints_found']}")
        print(f"   🟢 Working (200): {summary['soa2_working_200']}")
        print(f"   🟡 Auth Required (403): {summary['soa2_auth_required_403']}")

        print(f"📊 Dev Interfaces: {summary['dev_interfaces_found']}")
        print(f"📊 API Endpoints: {summary['api_endpoints_found']}")
        print(f"📊 Total Discovered: {summary['total_endpoints']}")

        # Show top findings
        if results["soa2_endpoints"]:
            print(f"\n🔥 Top SOA2 Findings:")
            working_200 = [
                r for r in results["soa2_endpoints"] if r.get("status_code") == 200
            ]
            for result in working_200[:5]:
                print(f"   ✅ {result['url']} - {result.get('confidence')}%")
                if result.get("data_extracted"):
                    print(f"      Data: {result.get('data_extracted')}")

        if results["dev_interfaces"]:
            print(f"\n🛠️ Top Dev Interface Findings:")
            for result in results["dev_interfaces"][:3]:
                print(f"   ✅ {result.get('url')} - {result.get('confidence')}%")

    def save_results(self, results: dict, output_dir: str | None = None):
        """Save comprehensive results"""
        if not output_dir:
            output_dir = f"ultimate_hunt_{results['domain'].replace('.', '_')}"

        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)

        # Save main results
        with open(output_path / "ultimate_hunt_results.json", "w") as f:
            json.dump(results, f, indent=2)

        # Save separate files for each type
        if results["soa2_endpoints"]:
            with open(output_path / "soa2_endpoints.json", "w") as f:
                json.dump(results["soa2_endpoints"], f, indent=2)

        if results["dev_interfaces"]:
            with open(output_path / "dev_interfaces.json", "w") as f:
                json.dump(results["dev_interfaces"], f, indent=2)

        if results["api_endpoints"]:
            with open(output_path / "api_endpoints.json", "w") as f:
                json.dump(results["api_endpoints"], f, indent=2)

        print(f"📁 Results saved to: {output_dir}/")


async def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="XSS Vibes V2 - Ultimate Hunter")
    parser.add_argument("domain", help="Target domain to hunt")
    parser.add_argument(
        "-d", "--deep", action="store_true", help="Enable deep scan mode"
    )
    parser.add_argument("-o", "--output", help="Output directory")

    args = parser.parse_args()

    print("🔥 XSS Vibes V2 - Ultimate Hunter")
    print("Based on real Trip.com/Ctrip.com discoveries")
    print("=" * 60)

    hunter = UltimateHunter()
    results = await hunter.ultimate_hunt(args.domain, deep_scan=args.deep)

    hunter.print_summary(results)
    hunter.save_results(results, args.output)


if __name__ == "__main__":
    asyncio.run(main())
