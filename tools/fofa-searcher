#!/usr/bin/env python3
"""
XSS Vibes V2 - Fofa Integration
Advanced Fofa search capabilities for target discovery
"""

import asyncio
import aiohttp
import json
import base64
import sys
from pathlib import Path
from typing import List, Dict, Optional
import argparse

# Add parent directory for imports
sys.path.append(str(Path(__file__).parent.parent))

import logging


def setup_logger(name: str):
    """Simple logger setup"""
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    return logger


class FofaSearcher:
    def __init__(self, email: str | None = None, api_key: str | None = None):
        self.email = email or self.load_config("email")
        self.api_key = api_key or self.load_config("api_key")
        self.base_url = "https://fofa.info/api/v1/search/all"
        self.logger = setup_logger("FofaSearcher")
        self.session = None

        # Predefined queries for travel/booking sites (Fofa syntax)
        self.travel_queries = {
            "ctrip_like": 'title="携程" || title="ctrip" || title="trip.com"',
            "booking_sites": 'title="booking" || title="hotel" || title="travel"',
            "soa2_endpoints": 'body="restapi/soa2" || body="/soa2/"',
            "admin_panels": 'title="admin" || title="管理" || title="后台"',
            "dev_interfaces": 'title="test" || title="dev" || title="staging"',
            "api_endpoints": 'body="api" && (body="json" || body="xml")',
            "chinese_travel": 'country="CN" && (title="旅游" || title="酒店" || title="机票")',
            "travel_apis": 'body="/api/" && (title="travel" || title="booking" || title="hotel")',
            "mobile_apis": 'body="/m/" && body="api"',
            "internal_apis": 'body="internal" && body="api"',
            "debug_endpoints": 'body="debug" || body="/debug/"',
        }

    def load_config(self, key: str) -> str:
        """Load Fofa credentials from file or environment"""
        try:
            # Try to load from config file
            config_file = Path(__file__).parent.parent / "config" / f"fofa_{key}.txt"
            if config_file.exists():
                return config_file.read_text().strip()
        except:
            pass

        # Try environment variable
        import os

        return os.getenv(f"FOFA_{key.upper()}", "")

    async def init_session(self):
        """Initialize aiohttp session"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30),
            headers={"User-Agent": "XSS-Vibes-V2-Fofa-Scanner"},
        )

    async def close_session(self):
        """Close aiohttp session"""
        if self.session:
            await self.session.close()

    async def search(self, query: str, size: int = 100, page: int = 1) -> Dict:
        """Search Fofa with query"""
        if not self.email or not self.api_key:
            self.logger.error("Fofa email and API key required")
            return {"results": [], "error": "No credentials"}

        if not self.session:
            await self.init_session()

        if self.session is None:
            self.logger.error("Failed to initialize session")
            return {"results": [], "error": "Session initialization failed"}

        try:
            # Encode query to base64
            query_base64 = base64.b64encode(query.encode()).decode()

            params = {
                "email": self.email,
                "key": self.api_key,
                "qbase64": query_base64,
                "size": size,
                "page": page,
                "fields": "host,title,ip,port,protocol,country,city",
            }

            self.logger.info(f"🔍 Searching Fofa: {query}")

            async with self.session.get(self.base_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    if data.get("error"):
                        self.logger.error(f"Fofa API error: {data['errmsg']}")
                        return {"results": [], "error": data["errmsg"]}

                    results = data.get("results", [])
                    self.logger.info(f"Found {len(results)} Fofa results")

                    return {
                        "results": results,
                        "size": data.get("size", 0),
                        "query": query,
                        "total": data.get("size", 0),
                    }
                else:
                    self.logger.error(f"Fofa HTTP error: {response.status}")
                    return {"results": [], "error": f"HTTP {response.status}"}

        except Exception as e:
            self.logger.error(f"Fofa search error: {e}")
            return {"results": [], "error": str(e)}

    def extract_targets_from_results(self, fofa_data: Dict) -> List[str]:
        """Extract target URLs from Fofa results"""
        targets = []
        results = fofa_data.get("results", [])

        for result in results:
            try:
                if len(result) >= 4:  # Ensure we have enough fields
                    host = result[0] if result[0] else ""
                    ip = result[2] if len(result) > 2 and result[2] else ""
                    port = result[3] if len(result) > 3 and result[3] else ""
                    protocol = result[4] if len(result) > 4 and result[4] else "http"

                    # Create target URLs
                    if host:
                        if port and port not in ["80", "443"]:
                            targets.append(f"{protocol}://{host}:{port}")
                        else:
                            targets.append(f"{protocol}://{host}")

                    # Also add IP-based URL if different from host
                    if ip and ip != host:
                        if port and port not in ["80", "443"]:
                            targets.append(f"{protocol}://{ip}:{port}")
                        else:
                            targets.append(f"{protocol}://{ip}")

            except Exception as e:
                self.logger.warning(f"Error processing Fofa result: {e}")
                continue

        # Remove duplicates and return
        unique_targets = list(set(targets))
        self.logger.info(f"Extracted {len(unique_targets)} unique targets from Fofa")
        return unique_targets

    async def search_for_soa2_targets(self, size: int = 50) -> List[str]:
        """Search specifically for SOA2-like targets"""
        all_targets = []

        # Search for SOA2 endpoints
        soa2_data = await self.search(self.travel_queries["soa2_endpoints"], size)
        all_targets.extend(self.extract_targets_from_results(soa2_data))

        # Search for Chinese travel sites
        travel_data = await self.search(self.travel_queries["chinese_travel"], size)
        all_targets.extend(self.extract_targets_from_results(travel_data))

        # Search for Ctrip-like sites
        ctrip_data = await self.search(self.travel_queries["ctrip_like"], size)
        all_targets.extend(self.extract_targets_from_results(ctrip_data))

        # Search for travel APIs
        api_data = await self.search(self.travel_queries["travel_apis"], size)
        all_targets.extend(self.extract_targets_from_results(api_data))

        return list(set(all_targets))

    async def search_custom_query(self, query: str, size: int = 100) -> Dict:
        """Search with custom query and return detailed results"""
        fofa_data = await self.search(query, size)
        targets = self.extract_targets_from_results(fofa_data)

        return {
            "query": query,
            "total_results": fofa_data.get("total", 0),
            "targets": targets,
            "raw_results": fofa_data.get("results", [])[
                :10
            ],  # Include first 10 for analysis
        }

    async def multi_query_search(self, queries: List[str], size: int = 50) -> Dict:
        """Search multiple queries and combine results"""
        all_results = {}
        all_targets = []

        for query in queries:
            self.logger.info(f"🔍 Searching: {query}")
            result = await self.search_custom_query(query, size)
            all_results[query] = result
            all_targets.extend(result["targets"])

            # Small delay to be nice to Fofa
            await asyncio.sleep(1)

        return {
            "queries": queries,
            "individual_results": all_results,
            "combined_targets": list(set(all_targets)),
            "total_unique_targets": len(set(all_targets)),
        }

    def save_results(self, results: Dict, output_file: str = "fofa_results.json"):
        """Save results to file"""
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, "w") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)

        self.logger.info(f"📁 Fofa results saved to: {output_path}")


async def main():
    """Main function for CLI usage"""
    parser = argparse.ArgumentParser(description="XSS Vibes V2 - Fofa Searcher")
    parser.add_argument("-q", "--query", help="Fofa search query")
    parser.add_argument(
        "-s", "--size", type=int, default=100, help="Result size (default: 100)"
    )
    parser.add_argument("-e", "--email", help="Fofa email")
    parser.add_argument("-k", "--key", help="Fofa API key")
    parser.add_argument(
        "-o", "--output", default="fofa_results.json", help="Output file"
    )
    parser.add_argument(
        "--soa2", action="store_true", help="Search for SOA2 targets specifically"
    )
    parser.add_argument(
        "--preset",
        choices=list(FofaSearcher().travel_queries.keys()),
        help="Use preset query",
    )
    parser.add_argument(
        "--multi", action="store_true", help="Run multiple preset queries"
    )

    args = parser.parse_args()

    print("🔍 XSS Vibes V2 - Fofa Integration")
    print("=" * 50)

    searcher = FofaSearcher(args.email, args.key)

    try:
        if args.soa2:
            print("🎯 Searching for SOA2 targets...")
            targets = await searcher.search_for_soa2_targets(args.size)
            results = {
                "search_type": "soa2_targets",
                "targets": targets,
                "total_targets": len(targets),
            }
        elif args.multi:
            print("🔍 Running multiple preset queries...")
            key_queries = [
                "soa2_endpoints",
                "chinese_travel",
                "ctrip_like",
                "travel_apis",
            ]
            results = await searcher.multi_query_search(
                [searcher.travel_queries[q] for q in key_queries], args.size
            )
        elif args.preset:
            query = searcher.travel_queries[args.preset]
            print(f"🔍 Using preset query: {args.preset}")
            print(f"Query: {query}")
            results = await searcher.search_custom_query(query, args.size)
        elif args.query:
            results = await searcher.search_custom_query(args.query, args.size)
        else:
            print("❌ Please provide a query (-q), use --soa2, --preset, or --multi")
            return

        # Print summary
        if "targets" in results:
            print(f"\n📊 Found {len(results['targets'])} targets")
            print("\n🎯 Top targets:")
            for i, target in enumerate(results["targets"][:10], 1):
                print(f"   {i}. {target}")
        elif "combined_targets" in results:
            print(f"\n📊 Found {len(results['combined_targets'])} unique targets")
            print("\n🎯 Top targets:")
            for i, target in enumerate(results["combined_targets"][:10], 1):
                print(f"   {i}. {target}")

        # Save results
        searcher.save_results(results, args.output)

    finally:
        await searcher.close_session()


if __name__ == "__main__":
    asyncio.run(main())
