#!/usr/bin/env python3
"""
XSS Vibes V2 - Simple Target Hunter
Standalone Shodan + Fofa target discovery
"""

import asyncio
import aiohttp
import json
import base64
import sys
from pathlib import Path
import argparse
from datetime import datetime
import logging


def setup_logger(name: str):
    """Simple logger setup"""
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    return logger


class SimpleTargetHunter:
    def __init__(self):
        self.logger = setup_logger("SimpleTargetHunter")
        self.session = None

        # High-value search queries
        self.search_queries = {
            "soa2_discovery": {
                "fofa": [
                    'body="restapi/soa2"',
                    'body="/soa2/"',
                    'title="ctrip" || title="trip.com"',
                ],
                "shodan": [
                    'http.html:"restapi/soa2"',
                    'http.html:"/soa2/"',
                    'http.title:"ctrip" OR http.title:"trip.com"',
                ],
            },
            "chinese_travel": {
                "fofa": [
                    'country="CN" && (title="旅游" || title="酒店" || title="机票")',
                    'title="携程" || title="去哪儿" || title="同程"',
                ],
                "shodan": [
                    'country:CN AND (http.title:"旅游" OR http.title:"酒店")',
                    'http.title:"携程" OR http.title:"去哪儿"',
                ],
            },
            "admin_panels": {
                "fofa": [
                    'title="admin" || title="管理" || title="后台"',
                    'body="admin" && body="login"',
                ],
                "shodan": ['http.title:"admin" OR http.title:"管理"'],
            },
        }

    async def init_session(self):
        """Initialize session"""
        self.session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30))

    async def close_session(self):
        """Close session"""
        if self.session:
            await self.session.close()

    async def search_fofa(
        self, query: str, email: str, api_key: str, size: int = 50
    ) -> list:
        """Search Fofa"""
        if not self.session:
            await self.init_session()

        if self.session is None:
            self.logger.error("Failed to initialize session")
            return []

        try:
            query_base64 = base64.b64encode(query.encode()).decode()
            url = "https://fofa.info/api/v1/search/all"

            params = {
                "email": email,
                "key": api_key,
                "qbase64": query_base64,
                "size": size,
                "fields": "host,title,ip,port,protocol",
            }

            self.logger.info(f"🔍 Fofa search: {query}")

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    results = data.get("results", [])

                    # Extract targets
                    targets = []
                    for result in results:
                        if len(result) >= 4:
                            host = result[0]
                            protocol = result[4] if len(result) > 4 else "http"
                            if host:
                                targets.append(f"{protocol}://{host}")

                    self.logger.info(f"📊 Fofa found {len(targets)} targets")
                    return targets
                else:
                    self.logger.error(f"Fofa error: {response.status}")
                    return []

        except Exception as e:
            self.logger.error(f"Fofa search error: {e}")
            return []

    async def search_shodan(self, query: str, api_key: str, limit: int = 50) -> list:
        """Search Shodan"""
        if not self.session:
            await self.init_session()

        if self.session is None:
            self.logger.error("Failed to initialize session")
            return []

        try:
            url = "https://api.shodan.io/shodan/host/search"
            params = {"key": api_key, "query": query, "limit": limit}

            self.logger.info(f"🌐 Shodan search: {query}")

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    results = data.get("matches", [])

                    # Extract targets
                    targets = []
                    for result in results:
                        ip = result.get("ip_str", "")
                        port = result.get("port", 80)

                        # Try to get hostname
                        hostname = None
                        http = result.get("http", {})
                        if http and "host" in http:
                            hostname = http["host"]

                        # Create URLs
                        protocol = "https" if port == 443 else "http"

                        if hostname:
                            targets.append(f"{protocol}://{hostname}")

                        if port in [80, 443]:
                            targets.append(f"{protocol}://{ip}")
                        else:
                            targets.append(f"{protocol}://{ip}:{port}")

                    unique_targets = list(set(targets))
                    self.logger.info(f"📊 Shodan found {len(unique_targets)} targets")
                    return unique_targets
                else:
                    self.logger.error(f"Shodan error: {response.status}")
                    return []

        except Exception as e:
            self.logger.error(f"Shodan search error: {e}")
            return []

    async def discover_targets(
        self,
        strategy: str,
        fofa_creds: dict | None = None,
        shodan_key: str | None = None,
        limit: int = 50,
    ) -> dict:
        """Discover targets using multiple sources"""
        results = {
            "strategy": strategy,
            "timestamp": datetime.now().isoformat(),
            "fofa_targets": [],
            "shodan_targets": [],
            "combined_targets": [],
            "stats": {},
        }

        if strategy not in self.search_queries:
            self.logger.error(f"Unknown strategy: {strategy}")
            return results

        queries = self.search_queries[strategy]

        # Fofa search
        if fofa_creds and fofa_creds.get("email") and fofa_creds.get("key"):
            self.logger.info(f"🔍 Starting Fofa discovery...")
            fofa_targets = []

            for query in queries.get("fofa", []):
                targets = await self.search_fofa(
                    query, fofa_creds["email"], fofa_creds["key"], limit
                )
                fofa_targets.extend(targets)
                await asyncio.sleep(1)  # Rate limiting

            results["fofa_targets"] = list(set(fofa_targets))

        # Shodan search
        if shodan_key:
            self.logger.info(f"🌐 Starting Shodan discovery...")
            shodan_targets = []

            for query in queries.get("shodan", []):
                targets = await self.search_shodan(query, shodan_key, limit)
                shodan_targets.extend(targets)
                await asyncio.sleep(1)  # Rate limiting

            results["shodan_targets"] = list(set(shodan_targets))

        # Combine results
        all_targets = results["fofa_targets"] + results["shodan_targets"]
        results["combined_targets"] = list(set(all_targets))

        # Generate stats
        results["stats"] = {
            "fofa_count": len(results["fofa_targets"]),
            "shodan_count": len(results["shodan_targets"]),
            "total_unique": len(results["combined_targets"]),
            "overlap": len(results["fofa_targets"])
            + len(results["shodan_targets"])
            - len(results["combined_targets"]),
        }

        self.logger.info(
            f"🎯 Discovery complete: {results['stats']['total_unique']} unique targets"
        )
        return results

    def save_results(self, results: dict, output_file: str):
        """Save results to file"""
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, "w") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)

        self.logger.info(f"📁 Results saved to: {output_path}")


async def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="XSS Vibes V2 - Simple Target Hunter")
    parser.add_argument(
        "-s",
        "--strategy",
        choices=["soa2_discovery", "chinese_travel", "admin_panels"],
        default="soa2_discovery",
        help="Discovery strategy",
    )
    parser.add_argument(
        "-l", "--limit", type=int, default=50, help="Result limit per query"
    )
    parser.add_argument("--fofa-email", help="Fofa email")
    parser.add_argument("--fofa-key", help="Fofa API key")
    parser.add_argument("--shodan-key", help="Shodan API key")
    parser.add_argument(
        "-o", "--output", default="simple_target_hunt.json", help="Output file"
    )

    args = parser.parse_args()

    print("🎯 XSS Vibes V2 - Simple Target Hunter")
    print("=" * 50)
    print("Standalone Shodan + Fofa Discovery")
    print("")

    if not any([args.fofa_email and args.fofa_key, args.shodan_key]):
        print("❌ Please provide at least one API key:")
        print("   --fofa-email EMAIL --fofa-key KEY")
        print("   --shodan-key KEY")
        return

    hunter = SimpleTargetHunter()

    try:
        fofa_creds = None
        if args.fofa_email and args.fofa_key:
            fofa_creds = {"email": args.fofa_email, "key": args.fofa_key}

        results = await hunter.discover_targets(
            args.strategy, fofa_creds, args.shodan_key, args.limit
        )

        # Print summary
        print(f"\n🎉 Discovery Complete!")
        print("=" * 50)
        stats = results["stats"]
        print(f"📊 Strategy: {args.strategy}")
        print(f"📊 Fofa Targets: {stats['fofa_count']}")
        print(f"📊 Shodan Targets: {stats['shodan_count']}")
        print(f"📊 Unique Total: {stats['total_unique']}")
        print(f"📊 Overlap: {stats['overlap']}")

        if results["combined_targets"]:
            print("\n🎯 Top discovered targets:")
            for i, target in enumerate(results["combined_targets"][:15], 1):
                print(f"   {i:2d}. {target}")

        # Save results
        hunter.save_results(results, args.output)

        # Show next steps
        print(f"\n🚀 Next Steps:")
        print(f"   Use discovered targets with our hunters:")
        print(f"   ./tools/ultimate-hunter DOMAIN")
        print(f"   ./tools/wordlist-hunter DOMAIN -t soa2")

    finally:
        await hunter.close_session()


if __name__ == "__main__":
    asyncio.run(main())
