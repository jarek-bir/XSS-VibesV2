#!/usr/bin/env python3
"""
XSS Vibes V2 - SOA2 Mass Generator
Generate thousands of SOA2 endpoint variations based on Ctrip discoveries
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path

# Add parent directory for imports
sys.path.append(str(Path(__file__).parent.parent))

from xss_vibes.api_hunter import APIEndpointHunter


class SOA2MassGenerator(APIEndpointHunter):
    def __init__(self):
        super().__init__()

        # SOA2 service IDs found working on Ctrip
        self.working_service_ids = [11470, 18088]

        # Generate more possible service IDs
        self.possible_service_ids = [
            # Working ones
            11470,
            18088,
            # Similar patterns
            10000,
            11000,
            12000,
            13000,
            14000,
            15000,
            16000,
            17000,
            18000,
            19000,
            20000,
            21000,
            22000,
            23000,
            24000,
            25000,
            26000,
            27000,
            28000,
            29000,
            30000,
            31000,
            32000,
            33000,
            34000,
            35000,
            36000,
            37000,
            38000,
            39000,
            # Common service port patterns
            8080,
            8081,
            8082,
            8083,
            8084,
            8085,
            8086,
            8087,
            8088,
            8089,
            8090,
            8091,
            8092,
            8093,
            8094,
            8095,
            8096,
            8097,
            8098,
            8099,
            # More variations around working ones
            11469,
            11471,
            11472,
            11473,
            11474,
            11475,
            18087,
            18089,
            18090,
            18091,
            18092,
            18093,
            # Incremental patterns
            *range(11400, 11500, 10),  # Around 11470
            *range(18000, 18100, 10),  # Around 18088
        ]

        # API endpoints to test
        self.api_endpoints = [
            # Working from discovery
            "getToken.json",
            "getAppConfig.json",
            # Common API patterns
            "getUser.json",
            "getConfig.json",
            "getSettings.json",
            "getUserInfo.json",
            "getProfile.json",
            "getAuth.json",
            "getSession.json",
            "getCredentials.json",
            "getApiKey.json",
            "getSecrets.json",
            "getKeys.json",
            "getData.json",
            "getInfo.json",
            "getStatus.json",
            "getHealth.json",
            "getVersion.json",
            "ping.json",
            "status.json",
            "health.json",
            "version.json",
            "config.json",
            "settings.json",
            "user.json",
            "token.json",
            "auth.json",
            "login.json",
            "logout.json",
            "refresh.json",
            # Admin endpoints
            "admin/getConfig.json",
            "admin/getUsers.json",
            "admin/getStats.json",
            "debug/getInfo.json",
            "debug/getTrace.json",
            "internal/getConfig.json",
            "internal/getStatus.json",
        ]

    def generate_soa2_mass_targets(self, domain: str) -> list:
        """Generate massive SOA2 target list"""
        targets = []

        # Base URLs
        base_urls = [
            f"https://m.{domain}",
            f"http://m.{domain}",
            f"https://www.{domain}",
            f"http://www.{domain}",
        ]

        print(
            f"🔢 Generating targets for {len(self.possible_service_ids)} service IDs..."
        )
        print(f"🎯 Testing {len(self.api_endpoints)} endpoint patterns...")

        # Generate all combinations
        for base_url in base_urls:
            for service_id in self.possible_service_ids:
                for endpoint in self.api_endpoints:
                    target = f"{base_url}/restapi/soa2/{service_id}/{endpoint}"
                    targets.append(target)

        print(f"🚀 Generated {len(targets)} total targets!")
        return targets

    async def hunt_soa2_mass(
        self, domain: str = "ctrip.com", max_concurrent: int = 10
    ) -> list:
        """Mass hunt SOA2 endpoints with concurrency control"""
        await self.init_session()

        try:
            targets = self.generate_soa2_mass_targets(domain)

            # Limit targets for demo (remove this for full scan)
            if len(targets) > 1000:
                print(
                    f"⚠️  Limiting to first 1000 targets for demo (total: {len(targets)})"
                )
                targets = targets[:1000]

            self.logger.info(f"🎯 Mass hunting {len(targets)} SOA2 endpoints...")

            results = []
            semaphore = asyncio.Semaphore(max_concurrent)

            async def test_with_semaphore(target):
                async with semaphore:
                    result = await self.test_api_endpoint(target)
                    if result and result.get("status_code") in [
                        200,
                        403,
                    ]:  # Include 403 as interesting
                        results.append(result)
                        status = result.get("status_code")
                        confidence = result.get("confidence")
                        print(f"✅ FOUND: {target} - {status} - {confidence}%")

                    # Very small delay
                    await asyncio.sleep(0.1)
                    return result

            # Run all tests concurrently
            tasks = [test_with_semaphore(target) for target in targets]
            await asyncio.gather(*tasks, return_exceptions=True)

            return results

        finally:
            await self.close_session()


async def main():
    """Main function"""
    print("🔍 XSS Vibes V2 - SOA2 Mass Generator")
    print("=" * 50)
    print("Mass hunting SOA2 endpoints based on Ctrip patterns")
    print("")

    # Ask for concurrency level
    try:
        concurrency = int(input("Enter max concurrent requests (default 5): ") or "5")
    except:
        concurrency = 5

    hunter = SOA2MassGenerator()
    results = await hunter.hunt_soa2_mass("ctrip.com", max_concurrent=concurrency)

    print(f"\n🎉 Mass hunt completed!")
    print(f"📊 Found {len(results)} working endpoints")

    # Sort by status code and confidence
    results.sort(key=lambda x: (x.get("status_code"), -x.get("confidence", 0)))

    # Show results by status
    status_200 = [r for r in results if r.get("status_code") == 200]
    status_403 = [r for r in results if r.get("status_code") == 403]

    print(f"\n🟢 Status 200 (Working): {len(status_200)}")
    for result in status_200[:10]:  # Show first 10
        print(f"   {result['url']} - {result.get('confidence')}%")
        if result.get("data_extracted"):
            print(f"      Data: {result.get('data_extracted')}")

    print(f"\n🟡 Status 403 (Auth Required): {len(status_403)}")
    for result in status_403[:10]:  # Show first 10
        print(f"   {result['url']} - {result.get('confidence')}%")

    # Save results
    if results:
        hunter.save_api_results(results, "soa2_mass_hunt")
        print(f"\n📁 Results saved to: soa2_mass_hunt/")


if __name__ == "__main__":
    asyncio.run(main())
