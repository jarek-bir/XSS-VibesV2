#!/usr/bin/env python3
"""
XSS Vibes V2 - Dev Hunter CLI
Quick launcher for development interface discovery
"""

import asyncio
import argparse
import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent))

from xss_vibes.dev_hunter import DevInterfaceHunter


def print_banner():
    """Print banner"""
    print("🔍 XSS Vibes V2 - Development Interface Hunter")
    print("=" * 50)
    print("Specialized reconnaissance for dev environments")
    print("")


def main():
    """Main CLI function"""
    parser = argparse.ArgumentParser(description="Hunt for development interfaces")
    parser.add_argument("domains", nargs="+", help="Target domains to hunt")
    parser.add_argument(
        "-o", "--output", default="dev_hunt_results", help="Output directory"
    )
    parser.add_argument(
        "-c", "--concurrent", type=int, default=20, help="Max concurrent requests"
    )
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")

    args = parser.parse_args()

    print_banner()

    if args.verbose:
        import logging

        logging.basicConfig(level=logging.DEBUG)

    print(f"🎯 Target domains: {', '.join(args.domains)}")
    print(f"📁 Output directory: {args.output}")
    print(f"⚡ Concurrent requests: {args.concurrent}")
    print("")

    async def run_hunt():
        hunter = DevInterfaceHunter()
        results = await hunter.hunt_dev_interfaces(args.domains, args.concurrent)
        hunter.save_dev_results(results, args.output)

        print("\n🎉 Hunt completed!")
        print(f"📊 Found {len(results)} development interfaces")

        # Show top results
        high_confidence = [r for r in results if r.get("confidence", 0) >= 70]
        if high_confidence:
            print(f"\n🔥 High confidence results ({len(high_confidence)}):")
            for result in high_confidence[:10]:
                print(f"  • {result['url']} ({result['confidence']}%)")
                if result.get("dev_info", {}).get("authors"):
                    print(f"    👤 Author: {result['dev_info']['authors'][0]}")

        print(f"\n📁 Full results saved to: {args.output}/")
        print(f"🌐 HTML report: {args.output}/dev_interfaces.html")

    # Run the hunt
    try:
        asyncio.run(run_hunt())
    except KeyboardInterrupt:
        print("\n⚠️  Hunt interrupted by user")
    except Exception as e:
        print(f"\n❌ Error during hunt: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
