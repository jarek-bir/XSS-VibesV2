#!/usr/bin/env python3
"""
XSS Vibes V2 - Cross-Domain SOA2 Hunter
Test SOA2 patterns across multiple Chinese travel/booking sites
"""

import asyncio
import json
from pathlib import Path
import sys

# Add parent directory
sys.path.append(str(Path(__file__).parent.parent))
from xss_vibes.api_hunter import APIEndpointHunter


class CrossDomainSOA2Hunter(APIEndpointHunter):
    def __init__(self):
        super().__init__()

        # Chinese travel/booking domains to test
        self.target_domains = [
            "ctrip.com",
            "trip.com",
            "elong.com",
            "qunar.com",
            "tuniu.com",
            "lvmama.com",
            "mafengwo.cn",
            "fliggy.com",
            "ly.com",
            "tujia.com",
            "xiaozhu.com",
            "meituan.com",
            "dianping.com",
            "booking.com",
            "agoda.com",
        ]

        # Focus on most promising service IDs
        self.possible_service_ids = [
            # Known working
            11470,
            18088,
            # High probability ranges
            *range(11460, 11480),  # Around 11470
            *range(18080, 18100),  # Around 18088
            # Common service patterns
            10000,
            20000,
            30000,
            11000,
            12000,
            13000,
            18000,
            19000,
        ]

        # Most valuable endpoints
        self.api_endpoints = [
            "getToken.json",
            "getAppConfig.json",
            "getUser.json",
            "getConfig.json",
            "getSettings.json",
            "getUserInfo.json",
            "getAuth.json",
            "getApiKey.json",
        ]

    async def cross_domain_hunt(self, max_concurrent: int = 3) -> dict:
        """Hunt across multiple domains"""
        await self.init_session()

        try:
            all_results = {}

            for domain in self.target_domains:
                print(f"\n🎯 Hunting domain: {domain}")

                # Generate targets for this domain
                targets = []
                base_urls = [f"https://m.{domain}", f"https://www.{domain}"]

                for base_url in base_urls:
                    for service_id in self.possible_service_ids:
                        for endpoint in self.api_endpoints:
                            target = f"{base_url}/restapi/soa2/{service_id}/{endpoint}"
                            targets.append(target)

                print(f"   Testing {len(targets)} endpoints...")

                # Hunt this domain
                results = []
                semaphore = asyncio.Semaphore(max_concurrent)

                async def test_domain_target(target):
                    async with semaphore:
                        try:
                            result = await self.test_api_endpoint(target)
                            if result and result.get("status_code") in [200, 403]:
                                results.append(result)
                                status = result.get("status_code")
                                confidence = result.get("confidence")
                                print(f"   ✅ {target} - {status} - {confidence}%")
                        except Exception as e:
                            pass  # Ignore errors, move on

                        await asyncio.sleep(0.2)  # Be nice to servers

                # Test all targets for this domain
                tasks = [test_domain_target(target) for target in targets]
                await asyncio.gather(*tasks, return_exceptions=True)

                all_results[domain] = results
                print(f"   📊 Found {len(results)} endpoints on {domain}")

            return all_results

        finally:
            await self.close_session()


async def main():
    """Main function"""
    print("🌐 XSS Vibes V2 - Cross-Domain SOA2 Hunter")
    print("=" * 60)
    print("Testing SOA2 patterns across Chinese travel/booking sites")
    print("Based on Ctrip.com discoveries")
    print("")

    hunter = CrossDomainSOA2Hunter()
    all_results = await hunter.cross_domain_hunt(max_concurrent=3)

    print(f"\n🎉 Cross-domain hunt completed!")
    print("=" * 60)

    # Summary by domain
    total_found = 0
    for domain, results in all_results.items():
        total_found += len(results)

        if results:
            print(f"\n🔥 {domain}: {len(results)} endpoints")

            # Show working 200s first
            status_200 = [r for r in results if r.get("status_code") == 200]
            status_403 = [r for r in results if r.get("status_code") == 403]

            if status_200:
                print(f"   🟢 Working (200): {len(status_200)}")
                for r in status_200[:3]:  # Show top 3
                    url = (
                        r["url"]
                        .replace(f"https://m.{domain}", "")
                        .replace(f"https://www.{domain}", "")
                    )
                    print(f"      {url} - {r.get('confidence')}%")
                    if r.get("data_extracted"):
                        print(f"         Data: {r.get('data_extracted')}")

            if status_403:
                print(f"   🟡 Auth Required (403): {len(status_403)}")
                for r in status_403[:2]:  # Show top 2
                    url = (
                        r["url"]
                        .replace(f"https://m.{domain}", "")
                        .replace(f"https://www.{domain}", "")
                    )
                    print(f"      {url} - {r.get('confidence')}%")
        else:
            print(f"   {domain}: No endpoints found")

    print(f"\n📊 Total endpoints found: {total_found}")

    # Save all results
    if total_found > 0:
        # Flatten results for saving
        flat_results = []
        for domain, results in all_results.items():
            flat_results.extend(results)

        hunter.save_api_results(flat_results, "cross_domain_soa2_hunt")
        print(f"📁 Results saved to: cross_domain_soa2_hunt/")


if __name__ == "__main__":
    asyncio.run(main())
