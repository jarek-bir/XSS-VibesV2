#!/usr/bin/env python3
"""
XSS Vibes V2 - Ctrip Specialized Hunter
Targets the exact endpoints discovered on ctrip.com
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path

# Add parent directory for imports
sys.path.append(str(Path(__file__).parent.parent))

from xss_vibes.api_hunter import APIEndpointHunter


class CtripHunter(APIEndpointHunter):
    def __init__(self):
        super().__init__()
        self.known_endpoints = [
            # Your discovered endpoints
            "/restapi/soa2/11470/getToken.json",
            "/restapi/soa2/18088/getAppConfig.json",
            # Variations to test
            "/restapi/soa2/11470/getUser.json",
            "/restapi/soa2/11470/getConfig.json",
            "/restapi/soa2/18088/getToken.json",
            "/restapi/soa2/18088/getUser.json",
            # Other possible SOA2 endpoints
            "/restapi/soa2/10000/getToken.json",
            "/restapi/soa2/20000/getConfig.json",
            "/restapi/soa2/30000/getUser.json",
            "/restapi/soa2/40000/getAppConfig.json",
        ]

    def generate_ctrip_targets(self, domain: str) -> list:
        """Generate Ctrip-specific targets"""
        targets = []

        # Base URLs for Ctrip
        base_urls = [
            f"https://m.{domain}",
            f"http://m.{domain}",
            f"https://www.{domain}",
            f"http://www.{domain}",
            f"https://{domain}",
            f"http://{domain}",
        ]

        # Add known endpoints
        for base_url in base_urls:
            for endpoint in self.known_endpoints:
                targets.append(f"{base_url}{endpoint}")

        return targets

    async def hunt_ctrip_endpoints(self, domain: str = "ctrip.com") -> list:
        """Hunt specifically for Ctrip-style endpoints"""
        await self.init_session()

        try:
            targets = self.generate_ctrip_targets(domain)
            self.logger.info(f"🎯 Testing {len(targets)} Ctrip-specific endpoints...")

            results = []
            for target in targets:
                self.logger.info(f"Testing: {target}")
                result = await self.test_api_endpoint(target)
                if result:
                    results.append(result)
                    print(
                        f"✅ FOUND: {target} - {result.get('status_code')} - {result.get('confidence')}%"
                    )

                # Small delay to be respectful
                await asyncio.sleep(0.5)

            return results

        finally:
            await self.close_session()


async def main():
    """Main function"""
    print("🔍 XSS Vibes V2 - Ctrip Specialized Hunter")
    print("=" * 50)
    print("Targeting the exact endpoints discovered manually")
    print("")

    hunter = CtripHunter()
    results = await hunter.hunt_ctrip_endpoints("ctrip.com")

    print(f"\n🎉 Hunt completed!")
    print(f"📊 Found {len(results)} endpoints")

    # Show results
    for result in results:
        print(f"\n🔥 {result['url']}")
        print(f"   Status: {result.get('status_code')}")
        print(f"   Confidence: {result.get('confidence')}%")
        print(f"   Risk: {result.get('risk_level')}")
        if result.get("data_extracted"):
            print(f"   Data: {result.get('data_extracted')}")

    # Save results
    if results:
        hunter.save_api_results(results, "ctrip_specialized_hunt")
        print(f"\n📁 Results saved to: ctrip_specialized_hunt/")


if __name__ == "__main__":
    asyncio.run(main())
