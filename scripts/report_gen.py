#!/usr/bin/env python3
"""
XSS Vibes - Advanced Report Generator
Generates comprehensive HTML reports per template, per payload, and per result
"""

import os
import json
import time
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from collections import defaultdict


@dataclass
class TestResult:
    """Individual test result"""

    payload: str
    template: str
    url: str
    method: str
    parameter: str
    status_code: int
    response_time: float
    content_length: int
    reflected: bool
    executed: bool
    waf_blocked: bool
    error_message: Optional[str] = None
    evidence: Optional[str] = None
    response_headers: Optional[Dict[str, str]] = None
    timestamp: Optional[str] = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()


@dataclass
class ScanSession:
    """Scan session metadata"""

    session_id: str
    start_time: str
    end_time: Optional[str]
    target_urls: List[str]
    total_tests: int
    successful_tests: int
    failed_tests: int
    vulnerabilities_found: int
    templates_used: List[str]
    payload_categories: List[str]
    scan_duration: Optional[float] = None

    def __post_init__(self):
        if self.end_time and self.scan_duration is None:
            start = datetime.fromisoformat(self.start_time)
            end = datetime.fromisoformat(self.end_time)
            self.scan_duration = (end - start).total_seconds()


class ReportGenerator:
    def __init__(self, output_dir: str = "reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

        # Report templates
        self.html_template = self._load_html_template()
        self.css_styles = self._load_css_styles()
        self.js_scripts = self._load_js_scripts()

    def _load_html_template(self) -> str:
        """Load HTML template for reports"""
        return """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>XSS Vibes - {title}</title>
    <style>{css}</style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/tabulator-tables@5.4.4/dist/js/tabulator.min.js"></script>
    <link href="https://unpkg.com/tabulator-tables@5.4.4/dist/css/tabulator.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="logo">
                <h1>üéØ XSS Vibes</h1>
                <span class="subtitle">{subtitle}</span>
            </div>
            <div class="report-info">
                <span class="timestamp">Generated: {timestamp}</span>
                <span class="report-type">{report_type}</span>
            </div>
        </header>
        
        <nav class="nav-tabs">
            <button class="tab-button active" onclick="showTab('overview')">üìä Overview</button>
            <button class="tab-button" onclick="showTab('results')">üîç Results</button>
            <button class="tab-button" onclick="showTab('templates')">üéØ Templates</button>
            <button class="tab-button" onclick="showTab('payloads')">üí• Payloads</button>
            <button class="tab-button" onclick="showTab('statistics')">üìà Statistics</button>
            <button class="tab-button" onclick="showTab('export')">üì§ Export</button>
        </nav>
        
        <main class="main-content">
            {content}
        </main>
        
        <footer class="footer">
            <p>Generated by XSS Vibes Advanced Report Generator</p>
            <p>Session ID: {session_id} | Total Tests: {total_tests}</p>
        </footer>
    </div>
    
    <script>{javascript}</script>
</body>
</html>"""

    def _load_css_styles(self) -> str:
        """Load CSS styles for reports"""
        return """
:root {
    --primary-color: #2c3e50;
    --secondary-color: #3498db;
    --success-color: #27ae60;
    --danger-color: #e74c3c;
    --warning-color: #f39c12;
    --info-color: #17a2b8;
    --dark-color: #343a40;
    --light-color: #f8f9fa;
    --border-color: #dee2e6;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--dark-color);
    background-color: var(--light-color);
}

.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
}

.header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.logo h1 {
    font-size: 2.5em;
    margin-bottom: 5px;
}

.subtitle {
    font-size: 1.2em;
    opacity: 0.9;
}

.report-info {
    text-align: right;
}

.timestamp, .report-type {
    display: block;
    margin-bottom: 5px;
}

.nav-tabs {
    display: flex;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 30px;
    overflow: hidden;
}

.tab-button {
    flex: 1;
    padding: 15px 20px;
    border: none;
    background: white;
    cursor: pointer;
    font-size: 1em;
    transition: all 0.3s ease;
    border-right: 1px solid var(--border-color);
}

.tab-button:last-child {
    border-right: none;
}

.tab-button:hover {
    background-color: var(--light-color);
}

.tab-button.active {
    background-color: var(--secondary-color);
    color: white;
}

.tab-content {
    display: none;
    animation: fadeIn 0.3s ease;
}

.tab-content.active {
    display: block;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    text-align: center;
    border-left: 4px solid var(--secondary-color);
}

.stat-number {
    font-size: 2.5em;
    font-weight: bold;
    color: var(--primary-color);
    margin-bottom: 10px;
}

.stat-label {
    font-size: 1.1em;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.chart-container {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 30px;
}

.chart-title {
    font-size: 1.3em;
    margin-bottom: 20px;
    color: var(--primary-color);
    text-align: center;
}

.results-table {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}

.severity-critical { color: var(--danger-color); font-weight: bold; }
.severity-high { color: #ff6b35; font-weight: bold; }
.severity-medium { color: var(--warning-color); font-weight: bold; }
.severity-low { color: var(--info-color); }
.severity-info { color: var(--success-color); }

.status-vulnerable { 
    background-color: var(--danger-color);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9em;
}

.status-safe {
    background-color: var(--success-color);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9em;
}

.status-blocked {
    background-color: var(--warning-color);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9em;
}

.template-section {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.template-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid var(--border-color);
}

.template-name {
    font-size: 1.4em;
    font-weight: bold;
    color: var(--primary-color);
}

.template-stats {
    font-size: 0.9em;
    color: #666;
}

.payload-list {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 15px;
}

.payload-item {
    background: var(--light-color);
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 6px;
    font-family: 'Courier New', monospace;
    border-left: 3px solid var(--secondary-color);
}

.export-section {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.export-buttons {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
    margin-top: 20px;
}

.export-btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
}

.export-btn.primary {
    background-color: var(--secondary-color);
    color: white;
}

.export-btn.success {
    background-color: var(--success-color);
    color: white;
}

.export-btn.warning {
    background-color: var(--warning-color);
    color: white;
}

.export-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.footer {
    background: var(--primary-color);
    color: white;
    text-align: center;
    padding: 20px;
    border-radius: 12px;
    margin-top: 30px;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background-color: var(--border-color);
    border-radius: 4px;
    overflow: hidden;
    margin: 10px 0;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--success-color), var(--secondary-color));
    transition: width 0.3s ease;
}

.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    border-left: 4px solid;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: var(--danger-color);
    color: #721c24;
}

.alert-warning {
    background-color: #fff3cd;
    border-color: var(--warning-color);
    color: #856404;
}

.alert-success {
    background-color: #d4edda;
    border-color: var(--success-color);
    color: #155724;
}

.alert-info {
    background-color: #cce7ff;
    border-color: var(--info-color);
    color: #0c5460;
}

@media (max-width: 768px) {
    .header {
        flex-direction: column;
        text-align: center;
    }
    
    .nav-tabs {
        flex-direction: column;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .export-buttons {
        flex-direction: column;
    }
}
"""

    def _load_js_scripts(self) -> str:
        """Load JavaScript for reports"""
        return """
function showTab(tabName) {
    // Hide all tabs
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Remove active class from all buttons
    const buttons = document.querySelectorAll('.tab-button');
    buttons.forEach(button => {
        button.classList.remove('active');
    });
    
    // Show selected tab
    const selectedTab = document.getElementById(tabName);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // Add active class to clicked button
    const activeButton = document.querySelector(`[onclick="showTab('${tabName}')"]`);
    if (activeButton) {
        activeButton.classList.add('active');
    }
    
    // Initialize charts if statistics tab is shown
    if (tabName === 'statistics') {
        setTimeout(initializeCharts, 100);
    }
}

function initializeCharts() {
    // Vulnerability Distribution Chart
    const vulnCtx = document.getElementById('vulnChart');
    if (vulnCtx && vulnData) {
        new Chart(vulnCtx, {
            type: 'doughnut',
            data: vulnData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Vulnerability Distribution'
                    }
                }
            }
        });
    }
    
    // Template Success Rate Chart
    const templateCtx = document.getElementById('templateChart');
    if (templateCtx && templateData) {
        new Chart(templateCtx, {
            type: 'bar',
            data: templateData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                    },
                    title: {
                        display: true,
                        text: 'Template Success Rates'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                }
            }
        });
    }
    
    // Timeline Chart
    const timelineCtx = document.getElementById('timelineChart');
    if (timelineCtx && timelineData) {
        new Chart(timelineCtx, {
            type: 'line',
            data: timelineData,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Vulnerabilities Found Over Time'
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'minute'
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
}

function exportData(format) {
    const data = {
        session: sessionData,
        results: resultsData,
        timestamp: new Date().toISOString()
    };
    
    let content = '';
    let filename = '';
    let mimeType = '';
    
    switch(format) {
        case 'json':
            content = JSON.stringify(data, null, 2);
            filename = `xss_vibes_report_${data.session.session_id}.json`;
            mimeType = 'application/json';
            break;
            
        case 'csv':
            content = convertToCSV(data.results);
            filename = `xss_vibes_report_${data.session.session_id}.csv`;
            mimeType = 'text/csv';
            break;
            
        case 'xml':
            content = convertToXML(data);
            filename = `xss_vibes_report_${data.session.session_id}.xml`;
            mimeType = 'application/xml';
            break;
    }
    
    downloadFile(content, filename, mimeType);
}

function convertToCSV(results) {
    const headers = ['Timestamp', 'URL', 'Template', 'Payload', 'Status', 'Vulnerable', 'WAF Blocked', 'Response Time'];
    const rows = results.map(result => [
        result.timestamp,
        result.url,
        result.template,
        `"${result.payload.replace(/"/g, '""')}"`,
        result.status_code,
        result.executed ? 'Yes' : 'No',
        result.waf_blocked ? 'Yes' : 'No',
        result.response_time
    ]);
    
    return [headers, ...rows].map(row => row.join(',')).join('\\n');
}

function convertToXML(data) {
    return `<?xml version="1.0" encoding="UTF-8"?>
<xss_vibes_report>
    <session id="${data.session.session_id}" start_time="${data.session.start_time}">
        <total_tests>${data.session.total_tests}</total_tests>
        <vulnerabilities_found>${data.session.vulnerabilities_found}</vulnerabilities_found>
    </session>
    <results>
        ${data.results.map(result => `
        <result>
            <timestamp>${result.timestamp}</timestamp>
            <url><![CDATA[${result.url}]]></url>
            <template>${result.template}</template>
            <payload><![CDATA[${result.payload}]]></payload>
            <vulnerable>${result.executed}</vulnerable>
            <waf_blocked>${result.waf_blocked}</waf_blocked>
            <response_time>${result.response_time}</response_time>
        </result>`).join('')}
    </results>
</xss_vibes_report>`;
}

function downloadFile(content, filename, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
}

function searchResults() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const table = document.getElementById('resultsTable');
    
    if (table && table.searchData) {
        table.setFilter([
            {field: "payload", type: "like", value: searchTerm},
            {field: "url", type: "like", value: searchTerm},
            {field: "template", type: "like", value: searchTerm}
        ], "or");
    }
}

function filterByStatus(status) {
    const table = document.getElementById('resultsTable');
    
    if (table && table.setFilter) {
        if (status === 'all') {
            table.clearFilter();
        } else {
            table.setFilter("executed", "=", status === 'vulnerable');
        }
    }
}

// Initialize tabulator table when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    if (typeof resultsData !== 'undefined' && resultsData.length > 0) {
        const table = new Tabulator("#resultsTable", {
            data: resultsData,
            pagination: "local",
            paginationSize: 25,
            layout: "fitColumns",
            responsiveLayout: "hide",
            columns: [
                {title: "Time", field: "timestamp", formatter: function(cell) {
                    return new Date(cell.getValue()).toLocaleTimeString();
                }, width: 100},
                {title: "URL", field: "url", formatter: function(cell) {
                    const url = cell.getValue();
                    return url.length > 50 ? url.substring(0, 50) + "..." : url;
                }},
                {title: "Template", field: "template", width: 120},
                {title: "Payload", field: "payload", formatter: function(cell) {
                    const payload = cell.getValue();
                    return `<code>${payload.length > 60 ? payload.substring(0, 60) + "..." : payload}</code>`;
                }},
                {title: "Status", field: "executed", formatter: function(cell) {
                    const executed = cell.getValue();
                    const blocked = cell.getRow().getData().waf_blocked;
                    if (executed) {
                        return '<span class="status-vulnerable">Vulnerable</span>';
                    } else if (blocked) {
                        return '<span class="status-blocked">WAF Blocked</span>';
                    } else {
                        return '<span class="status-safe">Safe</span>';
                    }
                }, width: 100},
                {title: "Response", field: "response_time", formatter: function(cell) {
                    return cell.getValue().toFixed(2) + "ms";
                }, width: 100}
            ]
        });
        
        // Store table reference for search/filter functions
        document.getElementById('resultsTable').searchData = table;
    }
});

// Auto-refresh progress bars
function updateProgressBars() {
    const progressBars = document.querySelectorAll('.progress-fill');
    progressBars.forEach(bar => {
        const percentage = bar.getAttribute('data-percentage');
        bar.style.width = percentage + '%';
    });
}

// Initialize everything when page loads
window.addEventListener('load', function() {
    updateProgressBars();
    showTab('overview');
});
"""

    def generate_comprehensive_report(
        self,
        results: List[TestResult],
        session: ScanSession,
        output_filename: Optional[str] = None,
    ) -> str:
        """Generate comprehensive HTML report"""

        if output_filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"xss_vibes_comprehensive_{timestamp}.html"

        # Generate content sections
        overview_content = self._generate_overview_content(results, session)
        results_content = self._generate_results_content(results)
        templates_content = self._generate_templates_content(results)
        payloads_content = self._generate_payloads_content(results)
        statistics_content = self._generate_statistics_content(results, session)
        export_content = self._generate_export_content(session)

        # Combine all content
        content = f"""
        <div id="overview" class="tab-content active">
            {overview_content}
        </div>
        <div id="results" class="tab-content">
            {results_content}
        </div>
        <div id="templates" class="tab-content">
            {templates_content}
        </div>
        <div id="payloads" class="tab-content">
            {payloads_content}
        </div>
        <div id="statistics" class="tab-content">
            {statistics_content}
        </div>
        <div id="export" class="tab-content">
            {export_content}
        </div>
        """

        # Generate data for JavaScript
        js_data = self._generate_js_data(results, session)

        # Fill template
        html_content = self.html_template.format(
            title="Comprehensive Security Report",
            subtitle="Complete XSS Testing Analysis",
            css=self.css_styles,
            content=content,
            javascript=self.js_scripts + js_data,
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            report_type="Comprehensive Report",
            session_id=session.session_id,
            total_tests=session.total_tests,
        )

        # Save report
        output_path = self.output_dir / output_filename
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        return str(output_path)

    def _generate_overview_content(
        self, results: List[TestResult], session: ScanSession
    ) -> str:
        """Generate overview section"""
        vulnerabilities = [r for r in results if r.executed]
        waf_blocked = [r for r in results if r.waf_blocked]
        success_rate = (len(vulnerabilities) / len(results) * 100) if results else 0

        return f"""
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{len(results)}</div>
                <div class="stat-label">Total Tests</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{len(vulnerabilities)}</div>
                <div class="stat-label">Vulnerabilities</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{len(waf_blocked)}</div>
                <div class="stat-label">WAF Blocked</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{success_rate:.1f}%</div>
                <div class="stat-label">Success Rate</div>
            </div>
        </div>
        
        <div class="alert alert-info">
            <h3>üìä Scan Summary</h3>
            <p><strong>Session ID:</strong> {session.session_id}</p>
            <p><strong>Duration:</strong> {session.scan_duration:.2f} seconds</p>
            <p><strong>Targets:</strong> {len(session.target_urls)} URLs tested</p>
            <p><strong>Templates:</strong> {len(session.templates_used)} different templates used</p>
        </div>
        
        {self._generate_vulnerability_alerts(vulnerabilities)}
        """

    def _generate_vulnerability_alerts(self, vulnerabilities: List[TestResult]) -> str:
        """Generate vulnerability alerts"""
        if not vulnerabilities:
            return '<div class="alert alert-success"><h3>‚úÖ No Vulnerabilities Found</h3><p>All tests passed without finding XSS vulnerabilities.</p></div>'

        critical_vulns = [v for v in vulnerabilities if "script" in v.payload.lower()]

        alerts = ""
        if critical_vulns:
            alerts += f"""
            <div class="alert alert-danger">
                <h3>üö® Critical Vulnerabilities Found</h3>
                <p>{len(critical_vulns)} high-severity XSS vulnerabilities detected with script execution capability.</p>
                <p><strong>Immediate action required!</strong></p>
            </div>
            """

        if len(vulnerabilities) > len(critical_vulns):
            other_vulns = len(vulnerabilities) - len(critical_vulns)
            alerts += f"""
            <div class="alert alert-warning">
                <h3>‚ö†Ô∏è Additional Vulnerabilities</h3>
                <p>{other_vulns} additional XSS vulnerabilities found that require attention.</p>
            </div>
            """

        return alerts

    def _generate_results_content(self, results: List[TestResult]) -> str:
        """Generate results table section"""
        return f"""
        <div class="results-section">
            <div class="results-controls">
                <input type="text" id="searchInput" placeholder="Search results..." onkeyup="searchResults()" style="padding: 10px; margin-right: 10px; border: 1px solid #ddd; border-radius: 4px;">
                <select onchange="filterByStatus(this.value)" style="padding: 10px; border: 1px solid #ddd; border-radius: 4px;">
                    <option value="all">All Results</option>
                    <option value="vulnerable">Vulnerabilities Only</option>
                    <option value="safe">Safe Only</option>
                    <option value="blocked">WAF Blocked</option>
                </select>
            </div>
            <div id="resultsTable" class="results-table"></div>
        </div>
        """

    def _generate_templates_content(self, results: List[TestResult]) -> str:
        """Generate templates analysis section"""
        templates_stats: Dict[str, Dict[str, Any]] = defaultdict(
            lambda: {"total": 0, "successful": 0, "payloads": set()}
        )

        for result in results:
            template_key = result.template
            templates_stats[template_key]["total"] += 1
            templates_stats[template_key]["payloads"].add(result.payload)
            if result.executed:
                templates_stats[template_key]["successful"] += 1

        content = ""
        for template, stats in sorted(templates_stats.items()):
            success_rate = (
                (stats["successful"] / stats["total"] * 100)
                if stats["total"] > 0
                else 0
            )

            content += f"""
            <div class="template-section">
                <div class="template-header">
                    <div class="template-name">üéØ {template}</div>
                    <div class="template-stats">
                        {stats['successful']}/{stats['total']} successful ({success_rate:.1f}%)
                    </div>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" data-percentage="{success_rate}"></div>
                </div>
                <p><strong>Unique Payloads:</strong> {len(stats['payloads'])}</p>
                <p><strong>Effectiveness:</strong> 
                    {'High' if success_rate > 70 else 'Medium' if success_rate > 30 else 'Low'}
                </p>
            </div>
            """

        return content

    def _generate_payloads_content(self, results: List[TestResult]) -> str:
        """Generate payloads analysis section"""
        payloads_stats: Dict[str, Dict[str, Any]] = defaultdict(
            lambda: {"total": 0, "successful": 0, "templates": set()}
        )

        for result in results:
            payloads_stats[result.payload]["total"] += 1
            payloads_stats[result.payload]["templates"].add(result.template)
            if result.executed:
                payloads_stats[result.payload]["successful"] += 1

        # Sort by success rate
        sorted_payloads = sorted(
            payloads_stats.items(),
            key=lambda x: (
                x[1]["successful"] / x[1]["total"] if x[1]["total"] > 0 else 0
            ),
            reverse=True,
        )

        successful_payloads = [
            p for p, stats in sorted_payloads if stats["successful"] > 0
        ]
        failed_payloads = [
            p for p, stats in sorted_payloads if stats["successful"] == 0
        ]

        content = f"""
        <div class="payload-section">
            <h2>üèÜ Most Effective Payloads ({len(successful_payloads)} successful)</h2>
            <div class="payload-list">
        """

        for payload, stats in sorted_payloads[:20]:  # Top 20
            if stats["successful"] > 0:
                success_rate = stats["successful"] / stats["total"] * 100
                content += f"""
                <div class="payload-item">
                    <code>{payload}</code>
                    <div style="margin-top: 8px; font-size: 0.9em; color: #666;">
                        Success: {stats['successful']}/{stats['total']} ({success_rate:.1f}%) | 
                        Templates: {len(stats['templates'])}
                    </div>
                </div>
                """

        content += """
            </div>
        </div>
        """

        if failed_payloads:
            content += f"""
            <div class="payload-section">
                <h2>‚ùå Ineffective Payloads ({len(failed_payloads)} failed)</h2>
                <p>These payloads did not result in successful XSS execution across all tests.</p>
            </div>
            """

        return content

    def _generate_statistics_content(
        self, results: List[TestResult], session: ScanSession
    ) -> str:
        """Generate statistics section with charts"""
        return """
        <div class="chart-container">
            <div class="chart-title">üìä Vulnerability Distribution</div>
            <canvas id="vulnChart" width="400" height="200"></canvas>
        </div>
        
        <div class="chart-container">
            <div class="chart-title">üéØ Template Success Rates</div>
            <canvas id="templateChart" width="400" height="200"></canvas>
        </div>
        
        <div class="chart-container">
            <div class="chart-title">üìà Vulnerabilities Timeline</div>
            <canvas id="timelineChart" width="400" height="200"></canvas>
        </div>
        """

    def _generate_export_content(self, session: ScanSession) -> str:
        """Generate export section"""
        return f"""
        <div class="export-section">
            <h2>üì§ Export Results</h2>
            <p>Download scan results in various formats for further analysis or reporting.</p>
            
            <div class="export-buttons">
                <button class="export-btn primary" onclick="exportData('json')">
                    üìÑ Export JSON
                </button>
                <button class="export-btn success" onclick="exportData('csv')">
                    üìä Export CSV
                </button>
                <button class="export-btn warning" onclick="exportData('xml')">
                    üìã Export XML
                </button>
                <a href="#" class="export-btn" onclick="window.print(); return false;">
                    üñ®Ô∏è Print Report
                </a>
            </div>
            
            <div style="margin-top: 30px;">
                <h3>üìÅ Report Details</h3>
                <ul>
                    <li><strong>Session ID:</strong> {session.session_id}</li>
                    <li><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</li>
                    <li><strong>Total Tests:</strong> {session.total_tests}</li>
                    <li><strong>Format Version:</strong> 2.0</li>
                </ul>
            </div>
        </div>
        """

    def _generate_js_data(self, results: List[TestResult], session: ScanSession) -> str:
        """Generate JavaScript data for charts and interactivity"""
        # Vulnerability distribution data
        vulnerable = len([r for r in results if r.executed])
        blocked = len([r for r in results if r.waf_blocked and not r.executed])
        safe = len(results) - vulnerable - blocked

        vuln_data = {
            "labels": ["Vulnerable", "WAF Blocked", "Safe"],
            "datasets": [
                {
                    "data": [vulnerable, blocked, safe],
                    "backgroundColor": ["#e74c3c", "#f39c12", "#27ae60"],
                    "borderWidth": 2,
                    "borderColor": "#fff",
                }
            ],
        }

        # Template success rates
        templates_stats = defaultdict(lambda: {"total": 0, "successful": 0})
        for result in results:
            templates_stats[result.template]["total"] += 1
            if result.executed:
                templates_stats[result.template]["successful"] += 1

        template_labels = list(templates_stats.keys())
        template_rates = [
            (stats["successful"] / stats["total"] * 100) if stats["total"] > 0 else 0
            for stats in templates_stats.values()
        ]

        template_data = {
            "labels": template_labels,
            "datasets": [
                {
                    "label": "Success Rate (%)",
                    "data": template_rates,
                    "backgroundColor": "#3498db",
                    "borderColor": "#2980b9",
                    "borderWidth": 1,
                }
            ],
        }

        # Timeline data (simplified)
        timeline_data = {
            "labels": ["Start", "25%", "50%", "75%", "End"],
            "datasets": [
                {
                    "label": "Vulnerabilities Found",
                    "data": [
                        0,
                        vulnerable // 4,
                        vulnerable // 2,
                        vulnerable * 3 // 4,
                        vulnerable,
                    ],
                    "borderColor": "#e74c3c",
                    "backgroundColor": "rgba(231, 76, 60, 0.1)",
                    "tension": 0.4,
                }
            ],
        }

        # Convert results to JSON for table
        results_json = [asdict(result) for result in results]
        session_json = asdict(session)

        return f"""
        
        // Chart data
        const vulnData = {json.dumps(vuln_data)};
        const templateData = {json.dumps(template_data)};
        const timelineData = {json.dumps(timeline_data)};
        
        // Results data for table and export
        const resultsData = {json.dumps(results_json, default=str)};
        const sessionData = {json.dumps(session_json, default=str)};
        """

    def generate_template_report(
        self, results: List[TestResult], template_name: str
    ) -> str:
        """Generate template-specific report"""
        template_results = [r for r in results if r.template == template_name]

        if not template_results:
            raise ValueError(f"No results found for template: {template_name}")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_filename = f"xss_vibes_template_{template_name}_{timestamp}.html"

        # Template-specific analysis
        successful = [r for r in template_results if r.executed]
        blocked = [r for r in template_results if r.waf_blocked]
        success_rate = (
            (len(successful) / len(template_results) * 100) if template_results else 0
        )

        content = f"""
        <div class="tab-content active">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{len(template_results)}</div>
                    <div class="stat-label">Total Tests</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{len(successful)}</div>
                    <div class="stat-label">Successful</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{len(blocked)}</div>
                    <div class="stat-label">Blocked</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{success_rate:.1f}%</div>
                    <div class="stat-label">Success Rate</div>
                </div>
            </div>
            
            <div class="template-section">
                <h2>üéØ Template Analysis: {template_name}</h2>
                {self._generate_template_detailed_analysis(template_results)}
            </div>
            
            <div id="resultsTable" class="results-table"></div>
        </div>
        """

        js_data = f"""
        const resultsData = {json.dumps([asdict(r) for r in template_results], default=str)};
        """

        html_content = self.html_template.format(
            title=f"Template Report - {template_name}",
            subtitle=f"Detailed analysis for {template_name}",
            css=self.css_styles,
            content=content,
            javascript=self.js_scripts + js_data,
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            report_type="Template Report",
            session_id=f"template_{template_name}",
            total_tests=len(template_results),
        )

        output_path = self.output_dir / output_filename
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        return str(output_path)

    def _generate_template_detailed_analysis(self, results: List[TestResult]) -> str:
        """Generate detailed template analysis"""
        # Analyze payload effectiveness for this template
        payload_stats = defaultdict(lambda: {"total": 0, "successful": 0})

        for result in results:
            payload_stats[result.payload]["total"] += 1
            if result.executed:
                payload_stats[result.payload]["successful"] += 1

        # Most effective payloads
        effective_payloads = sorted(
            payload_stats.items(),
            key=lambda x: (
                x[1]["successful"],
                x[1]["successful"] / x[1]["total"] if x[1]["total"] > 0 else 0,
            ),
            reverse=True,
        )[:10]

        analysis = f"""
        <h3>üí• Most Effective Payloads</h3>
        <div class="payload-list">
        """

        for payload, stats in effective_payloads:
            if stats["successful"] > 0:
                success_rate = stats["successful"] / stats["total"] * 100
                analysis += f"""
                <div class="payload-item">
                    <code>{payload}</code>
                    <div style="margin-top: 8px; font-size: 0.9em; color: #666;">
                        Success: {stats['successful']}/{stats['total']} ({success_rate:.1f}%)
                    </div>
                </div>
                """

        analysis += "</div>"

        # URL analysis
        url_stats = defaultdict(lambda: {"total": 0, "successful": 0})
        for result in results:
            url_stats[result.url]["total"] += 1
            if result.executed:
                url_stats[result.url]["successful"] += 1

        if len(url_stats) > 1:
            analysis += f"""
            <h3>üéØ URL Vulnerability Analysis</h3>
            <div class="url-analysis">
            """

            for url, stats in sorted(
                url_stats.items(), key=lambda x: x[1]["successful"], reverse=True
            ):
                success_rate = (
                    stats["successful"] / stats["total"] * 100
                    if stats["total"] > 0
                    else 0
                )
                status_class = (
                    "severity-critical"
                    if success_rate > 70
                    else "severity-high" if success_rate > 30 else "severity-medium"
                )

                analysis += f"""
                <div class="url-item">
                    <div class="url-name">{url}</div>
                    <div class="url-stats {status_class}">
                        {stats['successful']}/{stats['total']} ({success_rate:.1f}%)
                    </div>
                </div>
                """

            analysis += "</div>"

        return analysis

    def generate_payload_report(self, results: List[TestResult], payload: str) -> str:
        """Generate payload-specific report"""
        payload_results = [r for r in results if r.payload == payload]

        if not payload_results:
            raise ValueError(f"No results found for payload: {payload}")

        # Generate safe filename
        safe_payload = hashlib.md5(payload.encode()).hexdigest()[:8]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_filename = f"xss_vibes_payload_{safe_payload}_{timestamp}.html"

        successful = [r for r in payload_results if r.executed]
        blocked = [r for r in payload_results if r.waf_blocked]
        success_rate = (
            (len(successful) / len(payload_results) * 100) if payload_results else 0
        )

        content = f"""
        <div class="tab-content active">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{len(payload_results)}</div>
                    <div class="stat-label">Total Tests</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{len(successful)}</div>
                    <div class="stat-label">Successful</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{len(blocked)}</div>
                    <div class="stat-label">Blocked</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{success_rate:.1f}%</div>
                    <div class="stat-label">Success Rate</div>
                </div>
            </div>
            
            <div class="payload-section">
                <h2>üí• Payload Analysis</h2>
                <div class="payload-item">
                    <code>{payload}</code>
                </div>
                {self._generate_payload_detailed_analysis(payload_results)}
            </div>
            
            <div id="resultsTable" class="results-table"></div>
        </div>
        """

        js_data = f"""
        const resultsData = {json.dumps([asdict(r) for r in payload_results], default=str)};
        """

        html_content = self.html_template.format(
            title=f"Payload Report",
            subtitle=f"Analysis for specific payload",
            css=self.css_styles,
            content=content,
            javascript=self.js_scripts + js_data,
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            report_type="Payload Report",
            session_id=f"payload_{safe_payload}",
            total_tests=len(payload_results),
        )

        output_path = self.output_dir / output_filename
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        return str(output_path)

    def _generate_payload_detailed_analysis(self, results: List[TestResult]) -> str:
        """Generate detailed payload analysis"""
        # Template effectiveness for this payload
        template_stats = defaultdict(lambda: {"total": 0, "successful": 0})

        for result in results:
            template_stats[result.template]["total"] += 1
            if result.executed:
                template_stats[result.template]["successful"] += 1

        analysis = f"""
        <h3>üéØ Template Effectiveness</h3>
        <div class="template-effectiveness">
        """

        for template, stats in sorted(
            template_stats.items(), key=lambda x: x[1]["successful"], reverse=True
        ):
            success_rate = (
                stats["successful"] / stats["total"] * 100 if stats["total"] > 0 else 0
            )
            status_class = (
                "severity-critical"
                if success_rate > 70
                else "severity-high" if success_rate > 30 else "severity-medium"
            )

            analysis += f"""
            <div class="template-item">
                <div class="template-name">{template}</div>
                <div class="template-stats {status_class}">
                    {stats['successful']}/{stats['total']} ({success_rate:.1f}%)
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" data-percentage="{success_rate}"></div>
                </div>
            </div>
            """

        analysis += "</div>"

        # Response time analysis
        response_times = [r.response_time for r in results]
        avg_response_time = (
            sum(response_times) / len(response_times) if response_times else 0
        )

        analysis += f"""
        <h3>‚è±Ô∏è Performance Analysis</h3>
        <p><strong>Average Response Time:</strong> {avg_response_time:.2f}ms</p>
        <p><strong>Fastest Response:</strong> {min(response_times):.2f}ms</p>
        <p><strong>Slowest Response:</strong> {max(response_times):.2f}ms</p>
        """

        return analysis


def main():
    """Example usage of the report generator"""
    import argparse

    parser = argparse.ArgumentParser(description="XSS Vibes Report Generator")
    parser.add_argument(
        "--results-file", "-r", required=True, help="JSON file with test results"
    )
    parser.add_argument(
        "--output-dir", "-o", default="reports", help="Output directory"
    )
    parser.add_argument(
        "--report-type",
        "-t",
        choices=["comprehensive", "template", "payload"],
        default="comprehensive",
        help="Type of report to generate",
    )
    parser.add_argument("--template", help="Template name for template-specific report")
    parser.add_argument("--payload", help="Payload for payload-specific report")

    args = parser.parse_args()

    # Load results
    with open(args.results_file, "r", encoding="utf-8") as f:
        data = json.load(f)

    # Convert to TestResult objects
    results = []
    for result_data in data.get("results", []):
        result = TestResult(**result_data)
        results.append(result)

    # Create session object
    session_data = data.get("session", {})
    session = ScanSession(**session_data)

    # Generate report
    generator = ReportGenerator(args.output_dir)

    if args.report_type == "comprehensive":
        output_path = generator.generate_comprehensive_report(results, session)
        print(f"üìä Comprehensive report generated: {output_path}")

    elif args.report_type == "template":
        if not args.template:
            print("‚ùå Template name required for template report")
            return
        output_path = generator.generate_template_report(results, args.template)
        print(f"üéØ Template report generated: {output_path}")

    elif args.report_type == "payload":
        if not args.payload:
            print("‚ùå Payload required for payload report")
            return
        output_path = generator.generate_payload_report(results, args.payload)
        print(f"üí• Payload report generated: {output_path}")


if __name__ == "__main__":
    main()
