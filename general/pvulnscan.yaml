name: pvulnscan
desc: Run VulnSan & Dirbscan on Portscan result

report:
  final:
    - "{{Output}}/pdirectory/beautify-{{Workspace}}.txt"
    - "{{Output}}/vportscan/jaeles-report.html"
    - "{{Output}}/vportscan/jaeles-summary.txt"
    - "{{Output}}/vportscan/nuclei/{{Workspace}}-nuclei.html"
    - "{{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-json.txt"
    - "{{Output}}/vportscan/nuclei/{{Workspace}}-nuclei.html"

params:
  - portHttpFile: "{{Output}}/portscan/{{Workspace}}-http.txt"
  - wordlists: "{{Data}}/wordlists/content/small.txt"
  - sign: "~/.jaeles/base-signatures/common/.*"
  - sign2: "~/.jaeles/base-signatures/sensitive/.*"
  - nucleiSeverity: "critical,high,medium,low,info"
  - nucleiTimeout: "8h"
  - jaelesTimeout: "8h"
  - nucleiThreads: '{{ threads * 10 }}'
  - jaelesThreads: '{{ threads * 5 }}'
  - ffThreads: '{{ threads }}' # threads for single site
  - dirbThreads: '{{ threads / 3 }}'
  - ffTimeout: "2h"
  - recursion: '0'
  - chan: '#mics'
  - nuclei: 'true'
  - defaultUA: "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4581.0 Safari/537.36"
  # in case we want to add -p 'dest=xx.burpcollab.net' or something
  - extraJaeles: " "
  - extraNuclei: " "

pre_run:
  - CreateFolder("{{Output}}/pdirectory")
  - CreateFolder("{{Output}}/vportscan")
  - CreateFolder("{{Storages}}/paths/{{Workspace}}")

steps:
  # Jaeles Scan
  - required:
      - "{{Binaries}}/jaeles"
      - "{{portHttpFile}}"
    commands:
      - "timeout -k 1m {{jaelesTimeout}} {{Binaries}}/jaeles scan -c {{jaelesThreads}} -s '{{sign}}'  -U {{portHttpFile}} -o {{Output}}/vportscan/ {{extraJaeles}}"
      - "timeout -k 1m {{jaelesTimeout}} {{Binaries}}/jaeles scan --fi -c {{jaelesThreads}} -s '{{sign2}}' -U{{portHttpFile}}-o {{Output}}/vportscan/ {{extraJaeles}}"
    pconditions:
      - "FileLength('{{Output}}/vportscan/jaeles-summary.txt') > 0"
    scripts:
      - ExecCmd("sort -u -t '-' -k1,3 -o {{Output}}/vportscan/jaeles-summary.txt {{Output}}/vportscan/jaeles-summary.txt")
      - TeleMessByFile("#report", "{{Output}}/vportscan/jaeles-summary.txt")
      - ExecCmd("cat {{Output}}/vportscan/jaeles-summary.txt")

  # nuclei scan
  - label: 'Run nuclei scan'
    conditions:
      - '"{{enableNuclei}}" == "true"'
    required:
      - "{{portHttpFile}}"
      - "{{Binaries}}/nuclei"
    scripts:
      - "CreateFolder('{{Output}}/vportscan/nuclei')"
      - "ExecCmd(\"timeout -k 1m {{nucleiTimeout}} {{Binaries}}/nuclei -H '{{defaultUA}}' -project -project-path {{Output}}/vportscan/nuclei/db {{extraNuclei}} -silent -c {{nucleiThreads}} -jsonl -severity '{{nucleiSeverity}}' -t ~/nuclei-templates/ -l {{portHttpFile}} -irr -o {{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-json.txt\")"
    pconditions:
      - "FileLength('{{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-json.txt') > 0"
    pscripts:
      - GenNucleiReport('{{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-json.txt', '{{Output}}/vportscan/nuclei/{{Workspace}}-nuclei.html')
      # noti to telegram if anything found
      - ExecCmd("cat {{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-json.txt | jq -r '[.info.severity,.\"template-id\",.\"matched-at\",.\"matched-name\"] | join(\" - \")' > {{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-scan.txt")
      - TeleMessByFile("#sensitive", "{{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-scan.txt")
      - ExecCmd("cat {{Output}}/vportscan/nuclei/{{Workspace}}-port-nuclei-scan.txt")

  # running directory scan
  - required:
      - "{{Binaries}}/ffuf-mod"
      - "{{portHttpFile}}"
    source: "{{portHttpFile}}"
    threads: '{{threads}}'
    commands:
      - "timeout -k 1m {{ffTimeout}} {{Binaries}}/ffuf-mod -t {{ffThreads}} -recursion-depth {{recursion}} -timeout 8 -get-hash -ac -s -fc '429,404,400' -of json -o {{Output}}/pdirectory/raw-[[._id_]].json -u '[[.line]]/FUZZ' -w {{wordlists}}:FUZZ"
  - scripts:
      - ExecCmd("cat {{Output}}/pdirectory/raw-*.json | jq -r '[.url,(.status|tostring),(.length|tostring),(.words|tostring),(.lines|tostring),.hash,.redirectlocation] | join(\",\")' > {{Output}}/pdirectory/beautify-{{Workspace}}.csv")
      - ExecCmd("cat {{Output}}/pdirectory/raw-*.json | {{Binaries}}/junique -k 'hash' | jq -r '[.url,(.status|tostring),(.length|tostring),(.words|tostring),(.lines|tostring),.hash,.redirectlocation] | join(\",\")' > {{Output}}/pdirectory/unique-beautify-{{Workspace}}.csv")
      - ExecCmd("rm -rf {{Output}}/pdirectory/raw-*.json")
      - ExecCmd("cat {{Output}}/pdirectory/beautify-{{Workspace}}.csv | {{Binaries}}/csvtk cut -f 1,2,3,4,5,7 -I | {{Binaries}}/csvtk uniq -f 4 -I | {{Binaries}}/csvtk pretty --no-header-row -I -s ' | ' -W 75 > {{Output}}/pdirectory/beautify-{{Workspace}}.txt")
      - ExecCmd("cat {{Output}}/pdirectory/unique-beautify-{{Workspace}}.csv | {{Binaries}}/csvtk cut -f 1,2,3,4,5,7 -I | {{Binaries}}/csvtk uniq -f 4 -I | {{Binaries}}/csvtk pretty --no-header-row -I -s ' | ' -W 75 > {{Output}}/pdirectory/unique-beautify-{{Workspace}}.txt")
      - TeleMessByFile("#dirb", "{{Output}}/pdirectory/unique-beautify-{{Workspace}}.txt")
      - Cat("{{Output}}/pdirectory/unique-beautify-{{Workspace}}.txt")
      - "Printf('==> The unfiltered result can be found at: {{Output}}/pdirectory/beautify-{{Workspace}}.txt')"

  - scripts:
      - ExecCmd("rm -rf {{Output}}/vportscan/nuclei/db")
      - GenMarkdownReport("{{Data}}/markdown/general-template.md", "{{Output}}/summary.html")
